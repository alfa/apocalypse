scp_to_sql conversion tool

The purpose of the tool is to convert existing DB into sql tables so
that any sql based game server can use those DB.
The ideal of the tool is simple, you have
data files and you want to convert to sql tables by creating maps.
Note from the tool's perspective, the data source only follows a
certain format, namely each object in the file has to separate
by [XXXX #NUM#] where XXX is any identifier and #NUM# is either
non existing (in case of world.save) or an id uniquely identify 
each of the objects.

Map File
---------
A map file specifies the rules how you want to map the existing objects into sql tables.
There are basically three forms of mapping, namely simple, array, and concatenation.

X->Y is a simplest form of mapping X identifier into Y.  
X->Y1,Y2,Y3 is also a simple form of mapping X identifier into Y1, Y2 Y3 ect.

There are various ways to define Y. 
Y(VALUE): namely assigns VALUE to Y if X does not have a value. This is caled defaulted value.
Y : namely ignores columns y if X does not have a value
Y(*) : invalidate the object if X value does not exist.  The is a common way use for filtering
out different types of objects
Y(!*) : invalidates the object if X value exists. This is the NOT of Y(*).
!Y(*) : ensure X exists but not interested in the end result of Y

Array are objects with repeated identifiers. Array is the most complex types in the whole conversion
system.  For instances, loot items.  Array mapping looks as followed:

X[]->__Referencer__
"__Referencer__" is a unique identifier so the  tool will create X[0],X[1],X[2]...ect identifiers.
In case of loot items, each X[i] is uniquely identify itself and hence the second way to identify
an array type is:

X[UNIQUE(key)]->Y,  this will create series of items identify only by its key,X[i] pair.  Note
if there are two keys and an X[i] to identify an item, you can also specify the two keys
inside its UNIQUE identifier, i.e X[UNIQUE(key1,key2)]->Y.  Hence the element generated will
be {key1,key2,X[0]},{key2,key2,X[1]}, etc.  Another way to map an array into columns the user
specify would be the following:

X[]->__Referencer__
X[0]->Y1,Y2,Y3
X[1]->Z1,Z2,Z3

In this case, the user specified that only intested in element 0 and 1 in the array.  Any element
other than X[0] and X[1] will be ignored.  Note, the mapping of each X[i] follows the simple rule
stated above, which means an element can be single or multiple.  The given example is a multiple.

Concatenation is the simplest and yet most power form of mapping in the conversion tool. Concatenation
allows the user to specify n number of columns and concatenate it into a single columns (or single
identifier).  Due to the complexity it has to handle, all concatenation specification must contain
default values cuz you can not have skew columns with different sizes.  Any example of concatenation
would be:

ConCat(X1,X2,X3,X4)->Y(0,0,0,0)

Note, the default values rules for the simple mapping is also applied to both the array and concatenation.
The above concatenates X1,X2,X3,X4 into a single conlumn Y and provided with defaulted values.

ConCat(X1,X2)->Y(0,*)

Another example shows concatenates X1,X2 to Y and defaulted X1 to 0 and if X2 does not exist, the object
is invalid and thus ignores in the output.

Extra Info
----------
There are two tables that the map file supports, namely TypeTable and InfoTable.
TypeTable allows the user to specify the type of each column and thus, the end
result type conversion will be applied.  For instances,

TypeTable{X1=hex,X2=string}
X1->Y
X2->Z

specifies that X1 should be convert to hexidecimal and X2 to string before dumping
out the the sql table.  Missing type specification will end up to be AsIs.

InfoTable is a handy way of specify runtime info related to this particular map.  
Informations such as table name, output file, or id can be specify in here.

InfoTable{id=GUID,table=creatures,outfile=creatures.sql}

The above example shows to identify the object's uniqueness by GUID identifier and
creates the table name called "creatures" and output to creatures.sql file.  Another
special info is the apply-preprocess option. This option is specific to world.save
format and hence in the future, the tool should allow the user to create their own
preprocessor.  But for now, the preprocessor takes "true/false" as an indication
whether preprocessing applies.

